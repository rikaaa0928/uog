name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    name: Build and upload
    permissions: write-all
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # You can add more, for any target you'd like!
        include:
          - build: linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: linux-arm64-musl
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - build: linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}
      - uses: ilammy/setup-nasm@v1
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}  --bin uog

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="uog"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}

  lib-build-and-upload:
    name: Lib Build and upload
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: aarch64-linux-android
      - uses: nttld/setup-ndk@v1
        name: set up ndk
        with:
          ndk-version: r27b

      - name: setup and build
        shell: bash
        run: |
          cargo install cargo-ndk;
          cargo install cross --git https://github.com/cross-rs/cross;
          # cargo install --force --locked bindgen-cli
          cross build  --target aarch64-linux-android --release --lib;

      - name: Build archive
        shell: bash
        run: |
          dirname="jniLibs"
          mkdir -p $dirname/arm64-v8a
          cp target/aarch64-linux-android/release/libuog.so $dirname/arm64-v8a/libuniffi_uog.so
          tar -czf "$dirname-arm64-v8a.tar.gz" "$dirname"
          echo "ASSET=$dirname-arm64-v8a.tar.gz" >> $GITHUB_ENV
          

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
